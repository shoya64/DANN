#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jun  6 11:10:28 2020

@author: furukawashouya
"""


##書き方変えてみた

class DANNModel(nn.Module):
    
    
    def __init__(self, lstm_input_dim, lstm_hidden_dim, target_dim):
        super(DANNModel, self).__init__()
        self.feature = nn.Sequential()
        self.feature.add_module('lstm', 
                           nn.LSTM(input_size = lstm_input_dim, 
                           hidden_size = lstm_hidden_dim,
                           batch_first = True))
        #self.feature.add_module('lstm_dense', nn.Linear(lstm_hidden_dim, target_dim))
        
        self.class_classifier = nn.Sequential()
        self.feature.add_module('classifier_softmax', nn.Softmax())
        
        self.domain_classifier = nn.Sequential()
        self.domain_classifier.add_module('domain_sigmoid', nn.Sigmoid())
        
    def forward(self, X_input, alpha, hidden0 = None):
        feature, (hidden, cell) = self.feature(X_input, hidden0)
        reverse_feature = ReverseLayerF.apply(feature, alpha)
        class_output = self.class_classifier(feature)
        domain_output = self.domain_classifier(reverse_feature)
        
        
        return class_output, domain_output


class Exstracter(nn.Module):
    def __init__(self, lstm_input_dim, lstm_hidden_dim, target_dim):
        super(Exstracter, self).__init__()
        
        #self.input_dim =  lstm_input_dim
        #self.hidden_dim = lstm_hidden_dim
        
        self.lstm = nn.LSTM(input_size = lstm_input_dim, 
                           hidden_size = lstm_hidden_dim,
                           batch_first = True)
        ##lstm_input_dim = 入力特徴量の数 =Vector_size
        ##input = (Batch_Size * Sequence_Length * Vector_Size)
        #self.dense = nn.Linear(lstm_hidden_dim, target_dim)
        
    def forward(self, X_input, hidden0 = None):
        lstm_out, (hidden, cell) = self.lstm(X_input, hidden0)
        
        #linear_out = self.dense(lstm_out[:, -1, :])
        
        return lstm_out

class Class_classifier(nn.Module):
    def __init__(self):
        super(Class_classifier, self).__init__()
        
        self.dense = nn.Linear(64, 3)
        
    def forward(self, input):
        x = self.dense(input)
        softmax = F.softmax(x)
        
        return softmax
    
    
class Domain_classifier(nn.Module):
    def __init__(self):
        super(Domain_classifier, self).__init__()
        
        self.dense = nn.Linear(64, 2)
    
    def forward(self, input):
        x = self.dense(input)
        sigmoid = F.sigmoid(x)
        
        return sigmoid
